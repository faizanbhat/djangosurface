// Generated by CoffeeScript 1.6.3
(function() {
  var $, DomManager, Player, ScriptLoader, Surface, VideoFile,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  $(function() {
    var surface;
    window.media = [
      {
        src: "src/truth.mp4",
        poster: "src/poster.png",
        title: "Meet the new Kia"
      }
    ];
    return surface = new Surface("Advertisement");
  });

  ScriptLoader = (function() {
    function ScriptLoader() {
      var callback, compressed, lib, loadCallback, options, s, version, _i,
        _this = this;
      options = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      this.libraries = {
        jQuery: "http://ajax.googleapis.com/ajax/libs/jquery/$version/jquery.js",
        videoJs: "http://vjs.zencdn.net/$version/video.js",
        videoJsLocal: "video-js/video.dev.js"
      };
      lib = options[0], version = options[1], compressed = options[2];
      if (this.libraries[lib]) {
        lib = this.libraries[lib];
      }
      loadCallback = function() {
        if (_this.loaded) {
          return;
        }
        _this.loaded = true;
        return callback();
      };
      s = document.createElement('script');
      s.onload = loadCallback;
      s.onreadystatechange = function() {
        console.log("on ready state change");
        if (/loaded|complete/.test(s.readyState)) {
          return loadCallback();
        }
      };
      s.src = lib.replace('$version', version);
      if (compressed) {
        lib = lib.replace('.js', '.min.js');
      }
      document.getElementsByTagName('body')[0].appendChild(s);
    }

    return ScriptLoader;

  })();

  DomManager = (function() {
    function DomManager() {
      this.getStyle = __bind(this.getStyle, this);
      this.get = __bind(this.get, this);
      this.appendDivToParent = __bind(this.appendDivToParent, this);
      this.appendDivToBody = __bind(this.appendDivToBody, this);
      this.appendDivOutsideBody = __bind(this.appendDivOutsideBody, this);
      this.body = document.getElementsByTagName("body")[0];
      this.head = document.getElementsByTagName("head")[0];
      this.html = document.getElementsByTagName("html")[0];
    }

    DomManager.prototype.appendDivOutsideBody = function(id) {
      var s;
      s = document.createElement("div");
      s.id = id;
      return this.html.appendChild(s);
    };

    DomManager.prototype.appendDivToBody = function(id) {
      var s;
      s = document.createElement("div");
      s.id = id;
      return this.body.appendChild(s);
    };

    DomManager.prototype.appendDivToParent = function(id, parent_id) {
      var parent, s;
      s = document.createElement("div");
      s.id = id;
      parent = document.getElementById(parent_id);
      return parent.appendChild(s);
    };

    DomManager.prototype.get = function(id) {
      var elem;
      elem = document.getElementById(id);
      return elem;
    };

    DomManager.prototype.getStyle = function(url) {
      var l;
      l = document.createElement("link");
      l.href = url;
      l.rel = "stylesheet";
      l.type = "text/css";
      return this.head.appendChild(l);
    };

    return DomManager;

  })();

  Player = (function() {
    function Player(id, parent_id, poster) {
      this.addEventListener = __bind(this.addEventListener, this);
      this.isMuted = __bind(this.isMuted, this);
      this.timeRemaining = __bind(this.timeRemaining, this);
      this.currentTime = __bind(this.currentTime, this);
      this.duration = __bind(this.duration, this);
      this.loadFile = __bind(this.loadFile, this);
      this.unmute = __bind(this.unmute, this);
      this.mute = __bind(this.mute, this);
      this.pause = __bind(this.pause, this);
      this.play = __bind(this.play, this);
      var never_played, p;
      p = document.createElement("video");
      p.setAttribute("id", id);
      p.setAttribute("data-setup", '{ "controls": true, "autoplay": false, "preload": "true", "width": "100%"}');
      p.setAttribute("class", "video-js vjs-default-skin vjs-big-play-centered");
      document.getElementById(parent_id).appendChild(p);
      this.elem = document.getElementById(id);
      never_played = true;
    }

    Player.prototype.play = function() {
      var never_played;
      this.elem.play();
      return never_played = false;
    };

    Player.prototype.pause = function() {
      return this.elem.pause();
    };

    Player.prototype.mute = function() {
      return this.elem.volume = 0;
    };

    Player.prototype.unmute = function() {
      return this.elem.volume = 1;
    };

    Player.prototype.loadFile = function(vf) {
      var _this = this;
      this.elem.src = vf.source();
      if (vf.poster() && this.never_played) {
        this.elem.setAttribute("poster", vf.poster());
      }
      return this.elem.onloadedmetadata = function() {
        return _this.elem.currentTime = vf.position();
      };
    };

    Player.prototype.duration = function() {
      return this.elem.duration;
    };

    Player.prototype.currentTime = function() {
      return this.elem.currentTime;
    };

    Player.prototype.timeRemaining = function() {
      return this.elem.duration - this.elem.currentTime;
    };

    Player.prototype.isMuted = function() {
      if (this.elem.volume === 0 || this.elem.muted) {
        return true;
      } else {
        return false;
      }
    };

    Player.prototype.addEventListener = function(callback, func) {
      return this.elem.addEventListener(callback, func);
    };

    return Player;

  })();

  Surface = (function() {
    function Surface(site_name) {
      var item, vf, _i, _len, _ref;
      this.site_name = site_name;
      this.hide_wrapper = __bind(this.hide_wrapper, this);
      this.show_wrapper = __bind(this.show_wrapper, this);
      this.maximise = __bind(this.maximise, this);
      this.remove_wrapper = __bind(this.remove_wrapper, this);
      this.remove_overlay = __bind(this.remove_overlay, this);
      this.update_time_remaining = __bind(this.update_time_remaining, this);
      this.minimise = __bind(this.minimise, this);
      this.set_bindings = __bind(this.set_bindings, this);
      this.hide_slug = __bind(this.hide_slug, this);
      this.show_slug = __bind(this.show_slug, this);
      this.toggle_mute = __bind(this.toggle_mute, this);
      this.load_elements_for_slug = __bind(this.load_elements_for_slug, this);
      this.load_elements = __bind(this.load_elements, this);
      this.set_overlay = __bind(this.set_overlay, this);
      this.current_video = __bind(this.current_video, this);
      this.player_ready = __bind(this.player_ready, this);
      this.player = null;
      this.small_player = null;
      this.videos = [];
      _ref = window.media;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        vf = new VideoFile(item.src, 0, item.poster, item.title);
        this.videos.push(vf);
      }
      this.current_video_index = 0;
      this.dom = new DomManager();
      this.dom.getStyle("src/style.css");
      this.dom.getStyle("video-js/video-js.css");
      new ScriptLoader("videoJsLocal", this.player_ready);
    }

    Surface.prototype.player_ready = function() {
      console.log("ready----");
      this.set_overlay();
      return this.load_elements();
    };

    Surface.prototype.current_video = function() {
      return this.videos[this.current_video_index];
    };

    Surface.prototype.set_overlay = function() {
      $("body").css("-webkit-filter", "blur(15px)");
      $("body").css("filter", "blur(20px)");
      return $('html, body').css({
        'overflow': 'hidden',
        'height': '100%'
      });
    };

    Surface.prototype.load_elements = function() {
      var label;
      this.dom.appendDivOutsideBody("cs-wrapper");
      this.dom.appendDivToParent("cs-overlay", "cs-wrapper");
      this.$wrapper = $("#cs-wrapper");
      this.dom.appendDivToParent("cs-header", "cs-wrapper");
      this.dom.appendDivToParent("cs-close", "cs-header");
      this.dom.appendDivToParent("cs-main", "cs-wrapper");
      this.dom.appendDivToParent("cs-info-wrapper", "cs-wrapper");
      this.dom.appendDivToParent("cs-top-line", "cs-info-wrapper");
      this.dom.appendDivToParent("cs-rule", "cs-info-wrapper");
      this.dom.appendDivToParent("cs-bottom-line", "cs-info-wrapper");
      this.dom.appendDivToParent("cs-label", "cs-top-line");
      this.dom.appendDivToParent("cs-video-title", "cs-bottom-line");
      this.dom.appendDivToParent("cs-video-time-remaining", "cs-bottom-line");
      this.dom.appendDivToParent("cs-player-wrapper", "cs-wrapper");
      this.dom.appendDivToParent("cs-player-container", "cs-player-wrapper");
      this.dom.appendDivToParent("cs-footer", "cs-wrapper");
      this.dom.appendDivToParent("cs-video-title", "cs-wrapper");
      this.dom.appendDivToParent("cs-video-toolbar", "cs-wrapper");
      this.dom.appendDivToParent("cs-video-toolbar-forward", "cs-video-toolbar");
      this.dom.appendDivToParent("cs-video-toolbar-rewind", "cs-video-toolbar");
      label = $("#cs-label");
      label.html(this.site_name);
      this.$video_title = $("#cs-video-title");
      this.$video_title.html(this.current_video().title());
      this.$video_time_remaining = $("#cs-video-time-remaining");
      this.$video_time_remaining.html("");
      this.player = new Player("cs-video-player", "cs-player-container");
      this.player.addEventListener('timeupdate', this.update_time_remaining);
      this.player.loadFile(this.current_video());
      this.set_bindings();
      return this.load_elements_for_slug();
    };

    Surface.prototype.load_elements_for_slug = function() {
      var _this = this;
      this.dom.appendDivToBody("cs-slug-wrapper");
      this.dom.appendDivToParent("cs-slug-header", "cs-slug-wrapper");
      this.dom.appendDivToParent("cs-slug-header-expand-btn", "cs-slug-header");
      this.dom.appendDivToParent("cs-slug-header-mute-btn", "cs-slug-header");
      this.dom.appendDivToParent("cs-small-player-container", "cs-slug-wrapper");
      this.$slug_wrapper = $("#cs-slug-wrapper");
      $('#cs-slug-header-expand-btn').on("click", function() {
        return _this.maximise();
      });
      $('#cs-slug-header-mute-btn').on("click", function() {
        return _this.toggle_mute();
      });
      this.small_player = new Player("cs-small-video-player", "cs-small-player-container");
      return this.hide_slug();
    };

    Surface.prototype.toggle_mute = function() {
      console.log("wf");
      if (this.small_player.isMuted()) {
        this.small_player.unmute();
        return $('#cs-slug-header-mute-btn').css("background", "url('src/mute.png')");
      } else {
        this.small_player.mute();
        return $('#cs-slug-header-mute-btn').css("background", "url('src/unmute.png')");
      }
    };

    Surface.prototype.show_slug = function() {
      this.small_player.loadFile(this.current_video());
      this.small_player.play();
      return $("#cs-slug-wrapper").show();
    };

    Surface.prototype.hide_slug = function() {
      this.small_player.pause();
      this.current_video().setPosition(this.small_player.currentTime());
      return $("#cs-slug-wrapper").hide();
    };

    Surface.prototype.set_bindings = function() {
      var _this = this;
      return $("#cs-close").click(function() {
        return _this.minimise();
      });
    };

    Surface.prototype.minimise = function() {
      this.remove_overlay();
      this.hide_wrapper();
      return this.show_slug();
    };

    Surface.prototype.update_time_remaining = function() {
      var mins, mins_text, secs, secs_text, time_in_secs;
      time_in_secs = this.player.timeRemaining();
      if (typeof time_in_secs === 'number') {
        mins = Math.floor(time_in_secs / 60);
        secs = Math.ceil(time_in_secs % 60);
        if (mins > 9) {
          mins_text = '' + mins;
        } else {
          mins_text = '0' + mins;
        }
        if (secs > 9) {
          secs_text = '' + secs;
        } else {
          secs_text = '0' + secs;
        }
        return this.$video_time_remaining.html(mins_text + ":" + secs_text);
      }
    };

    Surface.prototype.remove_overlay = function() {
      $("body").css("-webkit-filter", "blur(0px)");
      $("html").css("filter", "blur(0px)");
      $('html, body').css({
        'overflow': 'auto',
        'height': 'auto'
      });
      return this.hide_wrapper();
    };

    Surface.prototype.remove_wrapper = function() {
      this.player.pause();
      return this.$wrapper.remove();
    };

    Surface.prototype.maximise = function() {
      this.hide_slug();
      this.set_overlay();
      return this.show_wrapper();
    };

    Surface.prototype.show_wrapper = function() {
      this.player.loadFile(this.current_video());
      this.player.play();
      return this.$wrapper.show();
    };

    Surface.prototype.hide_wrapper = function() {
      this.player.pause();
      this.current_video().setPosition(this.player.currentTime());
      return this.$wrapper.hide();
    };

    return Surface;

  })();

  VideoFile = (function() {
    function VideoFile(src, position, poster, title) {
      this.poster = __bind(this.poster, this);
      this.title = __bind(this.title, this);
      this.setSource = __bind(this.setSource, this);
      this.setPosition = __bind(this.setPosition, this);
      this.position = __bind(this.position, this);
      this.source = __bind(this.source, this);
      this.file_src = src != null ? src : "";
      this.playback_position = position != null ? position : 0;
      this.video_poster = poster != null ? poster : "";
      this.video_title = title != null ? title : "";
    }

    VideoFile.prototype.source = function() {
      return this.file_src;
    };

    VideoFile.prototype.position = function() {
      return this.playback_position;
    };

    VideoFile.prototype.setPosition = function(pos) {
      return this.playback_position = pos;
    };

    VideoFile.prototype.setSource = function(src) {
      return this.playback_position = src;
    };

    VideoFile.prototype.title = function() {
      return this.video_title;
    };

    VideoFile.prototype.poster = function() {
      if (this.video_poster.length > 0) {
        return this.video_poster;
      }
      return null;
    };

    return VideoFile;

  })();

}).call(this);
